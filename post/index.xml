<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on OpsNotice.xyz</title><link>https://valentin2105.github.io/opsnotice.xyz/post/</link><description>Recent content in Posts on OpsNotice.xyz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 14 Nov 2017 09:53:14 +0000</lastBuildDate><atom:link href="https://valentin2105.github.io/opsnotice.xyz/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes in IPv6 only</title><link>https://valentin2105.github.io/opsnotice.xyz/post/kubernetes-ipv6-only/</link><pubDate>Tue, 14 Nov 2017 09:53:14 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/kubernetes-ipv6-only/</guid><description>Since few weeks, I&amp;rsquo;m working to deploy IPv6-only Kubernetes cluster in production for my company. Here is how I made it, maybe it will help you if you want to try this (tumultuous) adventure.
I- Kubernetes installation To put Kubernetes in production, I strongly recommend avoiding using automated installation script but instead, use a configuration management tool (Saltstack, Chef, Puppet&amp;hellip;) to deploy Kubernetes from scratch like done in kubernetes-the-hard-way by the awesome Kelsey Hightower (the k8s-dope guy).</description></item><item><title>Kubernetes tips &amp; tricks</title><link>https://valentin2105.github.io/opsnotice.xyz/post/kubernetes-tips-tricks/</link><pubDate>Wed, 16 Aug 2017 23:27:54 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/kubernetes-tips-tricks/</guid><description>In this post, we will see few points to make your Kubernetes experience easier, secure and reproducible, especially on premise cluster.
I- Deploy using helm Helm is described as a packets manager for Kubernetes. It allows you to package all your application specifications to easily redeploy on any cluster.
A basic helm repository is composed by :
Charts.yaml for the name, tags and version of your application templates/ is the folder where you put all your Kubernetes .</description></item><item><title>Multi-stage deployment w/ deployer</title><link>https://valentin2105.github.io/opsnotice.xyz/post/deployer-multi-stage-dockercompose/</link><pubDate>Mon, 10 Jul 2017 03:37:00 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/deployer-multi-stage-dockercompose/</guid><description>Few weeks ago, I needed something to manage easily multi-stages (dev, integration, prod) environments for a Symfony app w/ Redis and Websockets on multi docker-compose files. So every environment got these own particularities.
To do that easily next times, I built a small go tool called deployer. Its use is quite simple :
You create a simple config.json file with all your environment (dev, prod for Wordpress in this example) :</description></item><item><title>IPTables IPv4/6 for Docker</title><link>https://valentin2105.github.io/opsnotice.xyz/post/iptables-ferm-docker/</link><pubDate>Mon, 08 May 2017 23:22:48 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/iptables-ferm-docker/</guid><description>Docker use IPTables to create network isolation between containers, to NAT traffic from their private networks and to expose ports on your Docker host. It&amp;rsquo;s why manage a firewall in front of that is not easy as 1,2,3, even more if you use dual stack (IPv4/6) on your containers.
To facilitate the control of Docker host&amp;rsquo;s firewall, I use Ferm, a great Perl front-end for IPtables. You can for sure use the great and simple UFW but Ferm got a more declarative way to write your firewall rules.</description></item><item><title>Docker with Saltstack</title><link>https://valentin2105.github.io/opsnotice.xyz/post/docker-with-saltstack/</link><pubDate>Wed, 24 Aug 2016 10:09:34 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/docker-with-saltstack/</guid><description>Docker is a fantastic but sometimes container management can be complicated. To simplify and automate Docker application deployments we can use Saltstack, a strong configuration management written in Python and using ZeroMQ for dial with servers (called minions).
In this post, I&amp;rsquo;ll show you how-to use Saltstack on a virtual cloud server based on Debian or Ubuntu. Salt will be used in a standalone mode, without master server.
Install Saltstack on your server We&amp;rsquo;re going to install salt-minion who&amp;rsquo;ll manage our deployment.</description></item><item><title>Overview of Rancher UI</title><link>https://valentin2105.github.io/opsnotice.xyz/post/overview-rancher-ui/</link><pubDate>Thu, 18 Aug 2016 22:09:47 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/overview-rancher-ui/</guid><description>Today, I&amp;rsquo;ll introduce you to Rancher UI, a Docker cluster management system, allowing deploy containers across multiple Docker hosts. You can manage your own Docker servers, deploy VMs on the cloud or add your Swarm, Kubernetes or Mesos existent clusters.
Say hello to Rancher, the container management platform that makes everything easy.
The goal of Rancher UI is to manage some Docker hosts (virtual or physical) from a Web interface which ensures container orchestration.</description></item><item><title>Deploy Gogs, a Git server</title><link>https://valentin2105.github.io/opsnotice.xyz/post/gogs-git-docker/</link><pubDate>Sun, 07 Aug 2016 21:26:00 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/gogs-git-docker/</guid><description>I&amp;rsquo;ll show you how-to deploy Gogs, a Git server with a webUI, wrote in Go. We&amp;rsquo;ll use Docker-compose for launch Gogs and Nginx secured with HTTPS using Let&amp;rsquo;s Encrypt.
Gogs (Go Git Service) is a painless self-hosted Git service.
For starting, we need to create some folders to receive our Gogs stack :
mkdir /srv/Gogs mkdir -p /srv/Gogs/etc/nginx mkdir -p /srv/Gogs/etc/certs For sure, we need Docker in our server, I use Debian Jessie in my case :</description></item><item><title>Nginx as a TLS reverse-proxy</title><link>https://valentin2105.github.io/opsnotice.xyz/post/nginx-docker-tls-reverse-proxy/</link><pubDate>Sun, 31 Jul 2016 21:29:47 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/nginx-docker-tls-reverse-proxy/</guid><description>In this post, I&amp;rsquo;ll show you how-to deploy a Nginx reverse-proxy with Let&amp;rsquo;s Encrypt and SNI support for deserving multi-domains. I&amp;rsquo;ll make this configuration on a Docker-based VM but you can, for sure, apply the same configuration on a hard Nginx installation.
We&amp;rsquo;re going to use Docker-compose to describe as we want our Nginx configuration, for this, I create docker-compose.yml :
version: &amp;quot;2&amp;quot; services: nginx-front: image: nginx:latest restart: always ports: - &amp;quot;443:443/tcp&amp;quot; - &amp;quot;80:80/tcp&amp;quot; volumes: - .</description></item><item><title>How-to monitor Docker ?</title><link>https://valentin2105.github.io/opsnotice.xyz/post/how-to-monitor-docker-hosts/</link><pubDate>Fri, 29 Jul 2016 06:05:17 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/how-to-monitor-docker-hosts/</guid><description>The use of containers needs a strong supervision with different metrics than traditional VMs. For monitor Docker hosts, I use a stack of InfluxDB a time-series database, Grafana the data visualiser and finally Telegraf to ship our metrics from few hosts.
I&amp;rsquo;ll show you how-to deploy InfluxDB and Grafana on a docker host and install Telegraf on a Debian-based distribution. For sure, we can use Telegraf on Docker but personally, I prefer to install it directly on hosts to make it more permanent.</description></item><item><title>Fix Debian locales error</title><link>https://valentin2105.github.io/opsnotice.xyz/post/fix-debian-locales-error/</link><pubDate>Tue, 26 Jul 2016 09:09:39 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/fix-debian-locales-error/</guid><description>Sometimes, Debian installations have some troubles with locales when you&amp;rsquo;re using apt for example. It is caused by missing environment variables or missing locales configuration.
To fix this problem for ever, just do these two things :
Add these lines on .bashrc or .zshrc :
export LANGUAGE=en_US.UTF-8 export LANG=en_US.UTF-8 export LC_ALL=en_US.UTF-8 Then you can run these commands :
locale-gen en_US.UTF-8 dpkg-reconfigure locales The last command ask you to choose any locale, I use en_US.</description></item><item><title>Manage containers with Systemd</title><link>https://valentin2105.github.io/opsnotice.xyz/post/manage-containers-with-systemd/</link><pubDate>Mon, 25 Jul 2016 19:09:58 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/manage-containers-with-systemd/</guid><description>Use Docker containers on the fly is quite easy but sometimes container management by shell becomes difficult. For easily launch and restart your container, we can use a Systemd unit.
Create Unit file In this example, I use a REDIS image that run with docker. We need to create the file /etc/systemd/system/redis.service :
[Unit] Description=Redis Service After=docker.service Requires=docker.service [Service] ExecStartPre=-/usr/bin/docker kill redis ExecStartPre=-/usr/bin/docker rm redis ExecStartPre=-/usr/bin/docker pull redis:latest ExecStart=/usr/bin/docker run -d --name redis --restart always redis:latest ExecStop=/usr/bin/docker stop redis [Install] WantedBy=multi-user.</description></item><item><title>Build a Swarm cluster</title><link>https://valentin2105.github.io/opsnotice.xyz/post/build-swarm-cluster/</link><pubDate>Mon, 25 Jul 2016 04:46:45 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/build-swarm-cluster/</guid><description>The version 1.12 of Docker has been released few days ago. Among the changes, Docker-Swarm get embedded directly into the Engine that allow easier Swarm deployment. I’m going to show that to you.
Docker Swarm is native clustering for Docker. It turns a pool of Docker hosts into a single, virtual Docker host.
Earlier stages, it was quite hard to deploy a Swarm cluster, you had to generate some certs, use a service discovery, configure each node… This time is over !</description></item><item><title>LEMP on Docker</title><link>https://valentin2105.github.io/opsnotice.xyz/post/lemp-on-docker/</link><pubDate>Sun, 24 Jul 2016 03:28:15 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/lemp-on-docker/</guid><description>In this first post, I&amp;rsquo;ll show you how to deploy a LEMP Server (Linux, Nginx, MariaDB, PHP) with Docker on Debian Jessie.
Why ? The advantage of use Docker in this case is that you can deploy it first on your laptop for your development process and finally deploy it easily on a Docker-based VM directly in the Cloud.
Install Docker The first step is the installation of Docker-Engine and Docker-Compose.</description></item></channel></rss>