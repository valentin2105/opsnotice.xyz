<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker-compose on OpsNotice.xyz</title><link>https://valentin2105.github.io/opsnotice.xyz/categories/docker-compose/</link><description>Recent content in docker-compose on OpsNotice.xyz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 10 Jul 2017 03:37:00 +0000</lastBuildDate><atom:link href="https://valentin2105.github.io/opsnotice.xyz/categories/docker-compose/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi-stage deployment w/ deployer</title><link>https://valentin2105.github.io/opsnotice.xyz/post/deployer-multi-stage-dockercompose/</link><pubDate>Mon, 10 Jul 2017 03:37:00 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/deployer-multi-stage-dockercompose/</guid><description>Few weeks ago, I needed something to manage easily multi-stages (dev, integration, prod) environments for a Symfony app w/ Redis and Websockets on multi docker-compose files. So every environment got these own particularities.
To do that easily next times, I built a small go tool called deployer. Its use is quite simple :
You create a simple config.json file with all your environment (dev, prod for Wordpress in this example) :</description></item><item><title>Deploy Gogs, a Git server</title><link>https://valentin2105.github.io/opsnotice.xyz/post/gogs-git-docker/</link><pubDate>Sun, 07 Aug 2016 21:26:00 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/gogs-git-docker/</guid><description>I&amp;rsquo;ll show you how-to deploy Gogs, a Git server with a webUI, wrote in Go. We&amp;rsquo;ll use Docker-compose for launch Gogs and Nginx secured with HTTPS using Let&amp;rsquo;s Encrypt.
Gogs (Go Git Service) is a painless self-hosted Git service.
For starting, we need to create some folders to receive our Gogs stack :
mkdir /srv/Gogs mkdir -p /srv/Gogs/etc/nginx mkdir -p /srv/Gogs/etc/certs For sure, we need Docker in our server, I use Debian Jessie in my case :</description></item><item><title>Nginx as a TLS reverse-proxy</title><link>https://valentin2105.github.io/opsnotice.xyz/post/nginx-docker-tls-reverse-proxy/</link><pubDate>Sun, 31 Jul 2016 21:29:47 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/nginx-docker-tls-reverse-proxy/</guid><description>In this post, I&amp;rsquo;ll show you how-to deploy a Nginx reverse-proxy with Let&amp;rsquo;s Encrypt and SNI support for deserving multi-domains. I&amp;rsquo;ll make this configuration on a Docker-based VM but you can, for sure, apply the same configuration on a hard Nginx installation.
We&amp;rsquo;re going to use Docker-compose to describe as we want our Nginx configuration, for this, I create docker-compose.yml :
version: &amp;quot;2&amp;quot; services: nginx-front: image: nginx:latest restart: always ports: - &amp;quot;443:443/tcp&amp;quot; - &amp;quot;80:80/tcp&amp;quot; volumes: - .</description></item><item><title>LEMP on Docker</title><link>https://valentin2105.github.io/opsnotice.xyz/post/lemp-on-docker/</link><pubDate>Sun, 24 Jul 2016 03:28:15 +0000</pubDate><guid>https://valentin2105.github.io/opsnotice.xyz/post/lemp-on-docker/</guid><description>In this first post, I&amp;rsquo;ll show you how to deploy a LEMP Server (Linux, Nginx, MariaDB, PHP) with Docker on Debian Jessie.
Why ? The advantage of use Docker in this case is that you can deploy it first on your laptop for your development process and finally deploy it easily on a Docker-based VM directly in the Cloud.
Install Docker The first step is the installation of Docker-Engine and Docker-Compose.</description></item></channel></rss>